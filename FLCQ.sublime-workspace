{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"C",
				"CREF2_AVG_OFFSET"
			],
			[
				"CR",
				"CREF1_AVG_OFFSET"
			],
			[
				"re",
				"reasonable_c0l0"
			],
			[
				"ee",
				"eeprom_write_byte"
			],
			[
				"avg",
				"avg_offset"
			],
			[
				"eeprom_re",
				"eeprom_read_byte"
			],
			[
				"E",
				"EEPROM"
			],
			[
				"f2",
				"f2_label"
			],
			[
				"f1_",
				"f1_label"
			],
			[
				"bu",
				"button_id"
			],
			[
				"fre",
				"frequency_pack"
			],
			[
				"tab_",
				"tab_inductance"
			],
			[
				"TFre",
				"TwoFreq"
			],
			[
				"delta_",
				"delta_temperature_f1_label"
			],
			[
				"ca",
				"calibration_temperature"
			],
			[
				"curren",
				"current_temperature_f1_label"
			],
			[
				"error",
				"error_label"
			],
			[
				"F",
				"Flcq"
			],
			[
				"update",
				"update_capacitance_tab_cref"
			],
			[
				"cref1",
				"cref1_text"
			],
			[
				"set",
				"set_ids"
			],
			[
				"indu",
				"inductance_results_label"
			],
			[
				"up",
				"update"
			],
			[
				"cref",
				"cref_eeprom_active"
			],
			[
				"ind",
				"inductance_cref2_label"
			],
			[
				"ta",
				"tab_inductance"
			],
			[
				"e",
				"cref_eeprom_active"
			],
			[
				"input",
				"input_id"
			],
			[
				"is",
				"is_init"
			],
			[
				"A",
				"ActionButton"
			],
			[
				"pa",
				"parent_id"
			],
			[
				"fr",
				"frequency_pack"
			],
			[
				"te",
				"temperature"
			],
			[
				"to",
				"to_string"
			],
			[
				"ref",
				"ref_frequency"
			],
			[
				"to_",
				"to_string"
			],
			[
				"port",
				"port_name"
			],
			[
				"flc",
				"flcq_is_init"
			],
			[
				"sele",
				"selected_uart_port"
			],
			[
				"scrollbar",
				"scrollbar"
			],
			[
				"W",
				"WIDTH"
			],
			[
				"label",
				"label_port"
			],
			[
				"po",
				"port"
			],
			[
				"la",
				"label_capacity"
			],
			[
				"label_",
				"label_frequency"
			],
			[
				"wh",
				"wh_of"
			],
			[
				"Se",
				"SerialPort"
			],
			[
				"serialport",
				"serialport"
			],
			[
				"tab",
				"tab_frequency_calibration"
			],
			[
				"rig",
				"right_text"
			],
			[
				"middl",
				"middle_text"
			],
			[
				"middle",
				"middle_col"
			],
			[
				"ti",
				"to_string"
			],
			[
				"overf",
				"overflows_array"
			],
			[
				"N",
				"n_overflow"
			],
			[
				"read",
				"read_data"
			],
			[
				"a",
				"adrress"
			],
			[
				"over",
				"overflows"
			],
			[
				"freq",
				"frequency"
			],
			[
				"fe",
				"frequency"
			],
			[
				"ge",
				"get_temperature"
			],
			[
				"_",
				"_byte_array"
			],
			[
				"wri",
				"write_data"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Cargo.toml",
			"settings":
			{
				"buffer_size": 542,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "extern crate clap;\nextern crate dirs;\nextern crate serialport;\n\n//use std::io::{self, Write};\n\n#[macro_use]\nextern crate conrod;\n\nuse clap::{App, AppSettings, Arg};\nuse conrod::backend::glium::glium::{self, Surface};\nuse conrod::{color, widget, Borderable, Colorable, Labelable, Positionable, Sizeable, Widget};\nmod com;\nmod commands;\nmod eeprom;\nmod sm;\n\nuse commands::TCommand;\n\nuse eeprom::TEeprom as Eeprom;\n\nconrod::widget_ids! {\n    pub struct Ids {\n        master,\n        top,\n        uart,\n        error,\n        uart_label_port,\n        uart_ports,\n        uart_connect_button,\n        uart_led,\n        error_label,\n        right_col,\n        left_text,\n        middle_text,\n        right_text,\n        text,\n        refresh,\n        tab_frequency,\n        tab_frequency_calibration,\n        tab_capacitance,\n        capacitance_cref1_label,\n        capacitance_cref1_edit,\n        capacitance_cref1_pf,\n        capacitance_e_cref1_label,\n        capacitance_e_cref1_value,\n        capacitance_e_cref1_pf,\n        capacitance_input_toggle,\n        capacitance_cref2_label,\n        capacitance_cref2_edit,\n        capacitance_cref2_pf,\n        capacitance_e_cref2_label,\n        capacitance_e_cref2_value,\n        capacitance_e_cref2_pf,\n        capacitance_eeprom_toggle,\n        capacitance_input_label,\n        capacitance_eeprom_label,\n        capacitance_input_l_label,\n        capacitance_eeprom_l_label,\n        capacitance_lref1_toggle,\n        capacitance_lref2_toggle,\n        capacitance_eeprom_lc_label,\n        capacitance_measure_button,\n        capacitance_f1_label,\n        capacitance_f2_label,\n        capacitance_frequency_calibration_temperature_f1_label,\n        capacitance_frequency_delta_temperature_f1_label,\n        capacitance_current_temperature_f1_label,\n        capacitance_calibration_temperature_f1_label,\n        capacitance_delta_temperature_f1_label,\n        capacitance_current_temperature_f2_label,\n        capacitance_calibration_temperature_f2_label,\n        capacitance_delta_temperature_f2_label,\n        capacitance_c_label,\n        capacitance_save_c1_button,\n        capacitance_save_c2_button,\n        tab_inductance,\n        tab_crystal,\n        label_frequency,\n        label_frequency_calibration,\n        tabs,\n        count_frequency_slider,\n        count_label_info,\n        count_label,\n        count_label_approx_in_sec,\n        ref_frequency,\n        ref_frequency_1,\n        ref_frequency_2,\n        freq_calibration_measure_button,\n        freq_calibration_save_button,\n        freq_calibration_temperature,\n        freq_calibration_period,\n        frequency_measure_button,\n        frequency_temperature,\n        inductance_measure_button,\n        inductance_cref1_label,\n        inductance_cref1_edit,\n        inductance_cref1_pf,\n        inductance_e_cref1_label,\n        inductance_e_cref1_value,\n        inductance_e_cref1_pf,\n        inductance_input_toggle,\n        inductance_cref2_label,\n        inductance_cref2_edit,\n        inductance_cref2_pf,\n        inductance_e_cref2_label,\n        inductance_e_cref2_value,\n        inductance_e_cref2_pf,\n        inductance_eeprom_toggle,\n        inductance_input_label,\n        inductance_eeprom_label,\n        inductance_f1_label,\n        inductance_f2_label,\n        inductance_l_label,\n        inductance_c_label,\n        inductance_results_label,\n        inductance_save_button,\n        inductance_reset_button,\n        inductance_current_temperature_f1_label,\n        inductance_calibration_temperature_f1_label,\n        inductance_delta_temperature_f1_label,\n        inductance_current_temperature_f2_label,\n        inductance_calibration_temperature_f2_label,\n        inductance_delta_temperature_f2_label,\n    }\n}\n\ntype FpackT = (\n    Option<(f64, f64, ((Option<f64>, std::string::String), f64))>,\n    std::string::String,\n);\n\n/*pub trait TEReceiver {\n    fn execute(&mut self) -> ();\n}*/\n\npub trait TClicked {\n    fn clicked(&mut self, button_label: &str, ui: &mut conrod::UiCell) -> bool;\n    fn parent_id(&mut self) -> widget::Id;\n}\n\npub struct ActionButton {\n    parent_id: widget::Id,\n    button_id: widget::Id,\n    enabled: bool,\n}\n\npub struct BToggle {\n    parent_id: widget::Id,\n    input_id: widget::Id,\n    eeprom_id: widget::Id,\n    input_label_id: widget::Id,\n    eeprom_label_id: widget::Id,\n    cref_input_active: bool,\n    cref_eeprom_active: bool,\n    inited_ids: bool,\n}\n\npub struct InputCRef {\n    toggle: BToggle,\n    icref1: Option<f64>,\n    icref2: Option<f64>,\n    ecref1: Option<f64>,\n    ecref2: Option<f64>,\n    tab_id: std::collections::HashMap<\n        std::string::String,\n        (\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n            widget::Id,\n        ),\n    >,\n}\n\npub struct TwoFreq<'a> {\n    ab: Box<dyn TClicked + 'a>,\n    f1: FpackT,\n    f2: FpackT,\n    error: widget::Id,\n    error_label: widget::Id,\n    f_label: [widget::Id; 2],\n    current_temperature_f_label: [widget::Id; 2],\n    calibration_temperature_f_label: [widget::Id; 2],\n    delta_temperature_f_label: [widget::Id; 2],\n}\n\nfn main() {\n    //let mut flcq: com::Flcq = com::init();\n    let mut eeprom = Box::new(Eeprom::default());\n    //_flcq.eeprom_write_f64(&0u8, &128.0f64);\n    //println!(\"{:?}\", _flcq.eeprom_read_f64(&0u8));\n    //let t = _flcq.get_temperature();\n    //_flcq.eeprom_write_f64(&8u8, &t);\n    //let period = _flcq.get_frequency_c(254u8) / 3000000.0f64;\n    //let period = _flcq.eeprom_read_f64(&16u8);\n\n    //let period = flcq.eeprom_read_f64(&40u8);\n    //let f = flcq.get_frequency_c(254u8) / period;\n\n    //_flcq.eeprom_write_f64(&40u8, &period);\n    //let t = _flcq.eeprom_read_f64(&8u8);\n    //println!(        \"measurments period {:?}sec, calibration temperature {}, current temperature {}\",        period,        t,        _flcq.get_temperature()    );\n    //println!(\"frequency {:?}Hz\", _flcq.get_frequency_c(254u8) / period);\n\n    const WIDTH: u32 = 600;\n    const HEIGHT: u32 = 480;\n\n    let mut events_loop = glium::glutin::EventsLoop::new();\n    let window = glium::glutin::WindowBuilder::new().with_title(\"FLCQ\");\n\n    let context = glium::glutin::ContextBuilder::new()\n        .with_vsync(true)\n        .with_multisampling(4);\n    let display = glium::Display::new(window, context, &events_loop).unwrap();\n    let mut ui = conrod::UiBuilder::new([WIDTH as f64, HEIGHT as f64]).build();\n    let home_dir = dirs::home_dir().unwrap();\n    //let font_folder = find_folder::Search::KidsThenParents(100, 100)        .for_folder(\"Noto-hinted\")        .unwrap();\n    let rdir = home_dir.to_str().unwrap();\n    ui.fonts\n        .insert_from_file(\"C:\\\\Windows\\\\Fonts\\\\timesbd.ttf\")\n        .unwrap();\n\n    let ids = Ids::new(ui.widget_id_generator());\n    let image_map = conrod::image::Map::<glium::texture::Texture2d>::new();\n    let mut renderer = conrod::backend::glium::Renderer::new(&display).unwrap();\n\n    let frequency_count_intervals = (1.0, 254.0);\n\n    let mut f_ref = None;\n\n    let mut lref_input_active = true;\n    let mut lref_eeprom_active = false;\n    let mut fc = (254u8, (None, \"\".to_string()), (None, \"\".to_string()));\n    let mut frequency = (None, \"\".to_string());\n\n    let mut cref_source = InputCRef::default();\n    cref_source.init(&ids);\n    let mut f1_f2 = TwoFreq::new(\n        Box::new(ActionButton::default()),\n        ids.error,\n        ids.error_label,\n    );\n\n    let mut sm = sm::Factory::new(&ids);\n\n    'render: loop {\n        // Handle all events.\n        let mut events = Vec::new();\n\n        events_loop.poll_events(|event| events.push(event));\n        if events.is_empty() {\n            events_loop.run_forever(|event| {\n                events.push(event);\n                glium::glutin::ControlFlow::Break\n            });\n        }\n\n        for event in events.drain(..) {\n            match event.clone() {\n                glium::glutin::Event::WindowEvent { event, .. } => match event {\n                    glium::glutin::WindowEvent::CloseRequested\n                    | glium::glutin::WindowEvent::KeyboardInput {\n                        input:\n                            glium::glutin::KeyboardInput {\n                                virtual_keycode: Some(glium::glutin::VirtualKeyCode::Escape),\n                                ..\n                            },\n                        ..\n                    } => break 'render,\n                    _ => (),\n                },\n                _ => (),\n            }\n\n            // Use the `winit` backend feature to convert the winit event to a conrod input.\n            let input = match conrod::backend::winit::convert_event(event, &display) {\n                None => continue,\n                Some(input) => input,\n            };\n\n            // Handle the input with the `Ui`.\n            ui.handle_event(input);\n\n            let ui = &mut ui.set_widgets();\n\n            //let s = period.to_string() + \"Sec\";\n\n            // Our `Canvas` tree, upon which we will place our text widgets.\n            widget::Canvas::new()\n                .flow_down(&[\n                    (\n                        ids.top,\n                        widget::Canvas::new()\n                            .color(conrod::color::WHITE)\n                            .length_weight(0.9)\n                            .pad(0.0),\n                    ),\n                    (\n                        ids.uart,\n                        widget::Canvas::new()\n                            .color(conrod::color::WHITE)\n                            .length_weight(0.1)\n                            .pad(0.0),\n                    ),\n                    (\n                        ids.error,\n                        widget::Canvas::new()\n                            .color(conrod::color::WHITE)\n                            .length_weight(0.1)\n                            .pad(0.0),\n                    ),\n                ])\n                .floating(true)\n                .set(ids.master, ui);\n\n            sm.machine.plot(&mut ui);\n\n            sm.clicked();\n\n\n            widget::Text::new(\"Period ticks: \")\n                .bottom_left_with_margins_on(ids.count_frequency_slider, 80.0, 20.0)\n                .color(conrod::color::BLACK)\n                .right_justify()\n                .font_size(45)\n                .line_spacing(3.0)\n                .parent(ids.tab_frequency_calibration)\n                .set(ids.count_label_info, ui);\n\n            {\n                let (count, _, _) = &fc;\n                widget::Text::new(&format!(\"{:}\", count))\n                    .bottom_left_with_margins_on(ids.count_frequency_slider, 80.0, 350.0)\n                    .color(conrod::color::BLACK)\n                    .right_justify()\n                    .font_size(45)\n                    .line_spacing(3.0)\n                    .parent(ids.tab_frequency_calibration)\n                    .set(ids.count_label, ui);\n\n                let text = \" [aprox. \".to_string();\n                let pp = format!(\"{:.5}\", (*count as f64) * 0.1048576);\n                let text = text + &pp;\n                let text = text + \" Sec ]\";\n\n                widget::Text::new(&text)\n                    .bottom_left_with_margins_on(ids.count_frequency_slider, 80.0, 480.0)\n                    .color(conrod::color::BLACK)\n                    .font_size(45)\n                    .line_spacing(3.0)\n                    .parent(ids.tab_frequency_calibration)\n                    .set(ids.count_label_approx_in_sec, ui);\n            }\n\n            widget::Text::new(&\"Reference frequency: \".to_string())\n                .bottom_left_with_margins_on(ids.count_frequency_slider, 80.0 + 100.0, 20.0)\n                .color(conrod::color::BLACK)\n                .font_size(45)\n                .line_spacing(1.0)\n                .set(ids.ref_frequency_1, ui);\n\n            match f_ref.clone() {\n                Some(f) => {\n                    if f < 1000.0 {\n                        mhz_lebel(ui, &ids, \"Hz\".to_string());\n                        let r = freq_show(ui, &ids, format!(\"{:.2}\", f));\n                        match r {\n                            Some(hz) => f_ref = Some(hz),\n                            None => (),\n                        }\n                    } else if 1000.0 < f && f < 1000_000.0 {\n                        mhz_lebel(ui, &ids, \"kHz\".to_string());\n                        let r = freq_show(ui, &ids, format!(\"{:.5}\", f / 1000.0));\n                        match r {\n                            Some(k_hz) => f_ref = Some(k_hz * 1000.0),\n                            None => (),\n                        }\n                    } else {\n                        mhz_lebel(ui, &ids, \"MHz\".to_string());\n                        let r = freq_show(ui, &ids, format!(\"{:.8}\", f / 1000_000.0));\n                        match r {\n                            Some(m_hz) => f_ref = Some(m_hz * 1000_000.0),\n                            None => (),\n                        }\n                    }\n                }\n                None => f_ref = Some(1000000.0),\n            }\n\n            if widget::Button::new()\n                .w_h(250.0, 100.0)\n                .bottom_left_with_margins_on(ids.tab_frequency_calibration, 450.0, 750.0)\n                .label_font_size(50)\n                .enabled(flcq.is_init())\n                .label(\"Measure\")\n                .parent(ids.tab_frequency_calibration)\n                .set(ids.freq_calibration_measure_button, ui)\n                .was_clicked()\n            {\n                if flcq.is_init() {\n                    let (count, _, _) = fc;\n                    fc = (count, flcq.get_frequency_c(&count), flcq.t());\n                }\n            }\n\n            if widget::Button::new()\n                .w_h(250.0, 100.0)\n                .bottom_left_with_margins_on(ids.tab_frequency_calibration, 450.0 - 120.0, 750.0)\n                .label_font_size(50)\n                .enabled(flcq.is_init())\n                .hover_color(conrod::color::YELLOW)\n                .press_color(conrod::color::RED)\n                .label(\"Save\")\n                .set(ids.freq_calibration_save_button, ui)\n                .was_clicked()\n            {\n                if flcq.is_init() {\n                    match &fc {\n                        (c, (Some(f), _), (Some(t), _)) => {\n                            flcq.eeprom_write_byte(&0u8, &c); // save N count\n                            flcq.eeprom_write_f64(&1u8, &f);\n                            match f_ref {\n                                Some(ref_frequency) => {\n                                    let periode = f / ref_frequency;\n                                    flcq.eeprom_write_f64(&9u8, &periode);\n                                    flcq.eeprom_write_f64(&17u8, &t)\n                                }\n                                None => (),\n                            }\n                        }\n                        (_, (None, _), _) => (),\n                        (_, (Some(_), _), (None, _)) => (),\n                    }\n                }\n            }\n\n            let (_, frequency_cal, temperature_cal) = &fc;\n\n            match (&frequency_cal, &f_ref) {\n                ((Some(f), _), Some(ref_frequency)) => {\n                    widget::Text::new(&format!(\"Mesured Period: {:.5} Sec\", f / ref_frequency))\n                        .bottom_left_with_margins_on(ids.tab_frequency_calibration, 480.0, 20.0)\n                        .color(conrod::color::BLACK)\n                        .right_justify()\n                        .font_size(45)\n                        .line_spacing(3.0)\n                        .set(ids.freq_calibration_period, ui);\n                }\n                ((None, str), _) => widget::Text::new(&str)\n                    .color(conrod::color::BLACK)\n                    .top_left_with_margins_on(ids.error, 5.0, 5.0)\n                    .right_justify()\n                    .font_size(16)\n                    .line_spacing(3.0)\n                    .set(ids.error_label, ui),\n                ((Some(_), _), None) => (),\n            }\n\n            match &temperature_cal {\n                (Some(t), _) => widget::Text::new(&format!(\"Temperature: {:.2} C\", t))\n                    .bottom_left_with_margins_on(ids.tab_frequency_calibration, 480.0 - 120.0, 20.0)\n                    .color(conrod::color::BLACK)\n                    .right_justify()\n                    .font_size(45)\n                    .line_spacing(3.0)\n                    .set(ids.freq_calibration_temperature, ui),\n                (None, str) => widget::Text::new(&str)\n                    .color(conrod::color::BLACK)\n                    .top_left_with_margins_on(ids.error, 5.0, 5.0)\n                    .right_justify()\n                    .font_size(16)\n                    .line_spacing(3.0)\n                    .set(ids.error_label, ui),\n            }\n\n            if widget::Button::new()\n                .w_h(250.0, 100.0)\n                .bottom_left_with_margins_on(ids.tab_frequency, 450.0, 750.0)\n                .label_font_size(50)\n                .enabled(flcq.is_init())\n                .label(\"Measure\")\n                .parent(ids.tab_frequency)\n                .set(ids.frequency_measure_button, ui)\n                .was_clicked()\n            {\n                if flcq.is_init() {\n                    frequency = frequency_pack(&mut flcq);\n                }\n            }\n\n            match &frequency {\n                (Some((f, p, t)), _) => {\n                    widget::Text::new(&format!(\"FREQ: {:.2} Hz\", f / p))\n                        .bottom_left_with_margins_on(ids.tab_frequency, 480.0, 20.0)\n                        .color(conrod::color::BLACK)\n                        .right_justify()\n                        .font_size(45)\n                        .line_spacing(3.0)\n                        .set(ids.label_frequency, ui);\n\n                    let (t1, tc) = t;\n                    match &t1 {\n                        (Some(t1), _) => temperature(\n                            ui,\n                            &ids,\n                            ids.tab_frequency,\n                            ids.frequency_temperature,\n                            (*t1, *tc, *t1 - *tc),\n                        ),\n                        (None, str) => error(ui, &ids, &str),\n                    };\n                }\n                (None, str) => error(ui, &ids, &str),\n            }\n\n            /*\n            match &temperature {\n                (Some(t), _) => {\n                    widget::Text::new(&format!(\"Temperature: {:.2} C\", t))\n                        .bottom_left_with_margins_on(ids.tab_frequency, 300.0, 20.0)\n                        .color(conrod::color::BLACK)\n                        .right_justify()\n                        .font_size(45)\n                        .line_spacing(3.0)\n                        .set(ids.frequency_temperature, ui);\n\n                    widget::Text::new(&format!(\n                        \"Calibration Temperature: {:.2} C\",\n                        calibration_temperature\n                    ))\n                    .bottom_left_with_margins_on(ids.tab_frequency, 200.0, 20.0)\n                    .color(conrod::color::BLACK)\n                    .font_size(45)\n                    .line_spacing(1.0)\n                    .set(ids.frequency_saved_temperature, ui);\n                }\n\n                (None, str) => widget::Text::new(&str)\n                    .color(conrod::color::BLACK)\n                    .top_left_with_margins_on(ids.error, 5.0, 5.0)\n                    .right_justify()\n                    .font_size(16)\n                    .line_spacing(3.0)\n                    .set(ids.error_label, ui),\n            }*/\n\n            // ====================================================================================\n            // tab inductance\n            // ====================================================================================\n            cref_source.update_inductance_tab_cref(&eeprom, ui);\n\n            /*{\n                if let ((Some(f1), _str1), (Some(f2), _str2)) =\n                    (frequency1_l.clone(), frequency2_l.clone())\n                {\n                    let (f1_, p1_, _) = f1;\n                    let (f2_, p2_, _) = f2;\n                    if swap_f(f1_ / p1_, f2_ / p2_) {\n                        let a = frequency2_l.clone();\n                        let b = frequency1_l.clone();\n                        frequency1_l = a;\n                        frequency2_l = b;\n                    }\n                }\n            }\n\n            let mut l_ab = ActionButton {\n                parent_id: ids.tab_inductance,\n                button_id: ids.inductance_measure_button,\n                enabled: || flcq.is_init(),\n            };*/\n\n            f1_f2.new_tab(\n                Box::new(ActionButton {\n                    parent_id: ids.tab_inductance,\n                    button_id: ids.inductance_measure_button,\n                    enabled: flcq.is_init(),\n                }),\n                ids.inductance_f1_label,\n                ids.inductance_current_temperature_f1_label,\n                ids.inductance_calibration_temperature_f1_label,\n                ids.inductance_delta_temperature_f1_label,\n                ids.inductance_f2_label,\n                ids.inductance_current_temperature_f2_label,\n                ids.inductance_calibration_temperature_f2_label,\n                ids.inductance_delta_temperature_f2_label,\n            );\n            match f1_f2.show(ui) {\n                EClick::FNONE => (),\n                EClick::F1 => f1_f2.f1_set(frequency_pack(&mut flcq)),\n                EClick::F2 => f1_f2.f2_set(frequency_pack(&mut flcq)),\n                EClick::END(f1, f2) => {\n                    if let (Some(c1), Some(c2)) = cref_source.crefs() {\n                        let (c, l) = calc_l(f1, f2, c1, c2);\n                        /*widget::Text::new(\"Results: \")\n                        .top_left_with_margins_on(ids.tab_inductance, 320.0, 70.0)\n                        .color(conrod::color::BLACK)\n                        .font_size(25)\n                        .line_spacing(3.0)\n                        .parent(ids.tab_inductance)\n                        .set(ids.inductance_results_label, ui);*/\n\n                        widget::Text::new(&format!(\"L: {:.2} uH\", l))\n                            .bottom_left_with_margins_on(ids.tab_inductance, 120.0, 20.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(35)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_l_label, ui);\n\n                        widget::Text::new(&format!(\"C: {:.2} pF\", c))\n                            .bottom_left_with_margins_on(ids.tab_inductance, 120.0, 800.0 - 530.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(35)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_c_label, ui);\n\n                        if widget::Button::new()\n                            .w_h(220.0, 70.0)\n                            .bottom_left_with_margins_on(ids.tab_inductance, 100.0, 800.0 - 250.0)\n                            .label(\"SAVE\")\n                            .label_font_size(35)\n                            .color(conrod::color::LIGHT_BLUE)\n                            .set(ids.inductance_save_button, ui)\n                            .was_clicked()\n                        {\n                            history.append(Box::new(commands::TSaveCL { value: (c, l) }));\n                        }\n                    }\n                }\n            }\n\n            /*match (frequency1_l.clone(), frequency2_l.clone()) {\n                ((None, str), _) => {\n                    if l_ab.clicked(\"F1\", ui) {\n                        frequency1_l = frequency_pack(&mut flcq);\n                    };\n\n                    widget::Text::new(&str)\n                        .color(conrod::color::BLACK)\n                        .top_left_with_margins_on(ids.error, 5.0, 5.0)\n                        .right_justify()\n                        .font_size(16)\n                        .line_spacing(3.0)\n                        .set(ids.error_label, ui);\n                }\n\n                ((Some(f1), _), (None, str)) => {\n                    if l_ab.clicked(\"F2\", ui) {\n                        frequency2_l = frequency_pack(&mut flcq);\n                    };\n\n                    let (f, p, t) = f1;\n\n                    widget::Text::new(&format!(\"F1: {:.2} Hz\", f / p))\n                        .top_left_with_margins_on(ids.tab_inductance, 150.0, 20.0)\n                        .color(conrod::color::BLACK)\n                        .font_size(25)\n                        .line_spacing(3.0)\n                        .parent(ids.tab_inductance)\n                        .set(ids.inductance_f1_label, ui);\n\n                    let (current, calibration_temperature) = t;\n                    if let (Some(t98), _) = current {\n                        widget::Text::new(&format!(\"current temperature: {:.2} C\", t98))\n                            .top_left_with_margins_on(ids.tab_inductance, 180.0, 20.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_current_temperature_f1_label, ui);\n\n                        widget::Text::new(&format!(\n                            \"calibration temperature: {:.2} C\",\n                            calibration_temperature\n                        ))\n                        .top_left_with_margins_on(ids.tab_inductance, 210.0, 20.0)\n                        .color(conrod::color::BLACK)\n                        .font_size(25)\n                        .line_spacing(3.0)\n                        .parent(ids.tab_inductance)\n                        .set(\n                            ids.inductance_frequency_calibration_temperature_f1_label,\n                            ui,\n                        );\n\n                        widget::Text::new(&format!(\n                            \"delta: {:.2} C\",\n                            t98 - calibration_temperature\n                        ))\n                        .top_left_with_margins_on(ids.tab_inductance, 240.0, 20.0)\n                        .color(conrod::color::BLACK)\n                        .font_size(25)\n                        .line_spacing(3.0)\n                        .parent(ids.tab_inductance)\n                        .set(ids.inductance_frequency_delta_temperature_f1_label, ui);\n                    }\n\n                    widget::Text::new(&str)\n                        .color(conrod::color::BLACK)\n                        .top_left_with_margins_on(ids.error, 5.0, 5.0)\n                        .right_justify()\n                        .font_size(16)\n                        .line_spacing(3.0)\n                        .set(ids.error_label, ui);\n                }\n\n                ((Some(f1), _str1), (Some(f2), _str2)) => {\n                    if let (Some(c1), Some(c2)) = cref_source.crefs() {\n                        let (f1_, p1_, t1) = f1;\n                        let (f2_, p2_, t2) = f2;\n\n                        let f1 = f1_ / p1_;\n                        let f2 = f2_ / p2_;\n\n                        let (c, l) = calc_l(f1, f2, c1, c2);\n\n                        widget::Text::new(&format!(\"F1: {:.2} Hz\", f1))\n                            .top_left_with_margins_on(ids.tab_inductance, 150.0, 20.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_f1_label, ui);\n\n                        let (current1, calibration_temperature1) = t1;\n                        if let (Some(t98), _) = current1 {\n                            widget::Text::new(&format!(\"current temperature: {:.2} C\", t98))\n                                .top_left_with_margins_on(ids.tab_inductance, 180.0, 20.0)\n                                .color(conrod::color::BLACK)\n                                .font_size(25)\n                                .line_spacing(3.0)\n                                .parent(ids.tab_inductance)\n                                .set(ids.inductance_current_temperature_f1_label, ui);\n\n                            widget::Text::new(&format!(\n                                \"calibration temperature: {:.2} C\",\n                                calibration_temperature1\n                            ))\n                            .top_left_with_margins_on(ids.tab_inductance, 210.0, 20.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(\n                                ids.inductance_frequency_calibration_temperature_f1_label,\n                                ui,\n                            );\n\n                            widget::Text::new(&format!(\n                                \"delta: {:.2} C\",\n                                t98 - calibration_temperature1\n                            ))\n                            .top_left_with_margins_on(ids.tab_inductance, 240.0, 20.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_frequency_delta_temperature_f1_label, ui);\n                        }\n\n                        widget::Text::new(&format!(\"F2: {:.2} Hz\", f2))\n                            .top_left_with_margins_on(ids.tab_inductance, 150.0, 560.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_f2_label, ui);\n\n                        let (current2, calibration_temperature2) = t2;\n                        if let (Some(t99), _) = current2 {\n                            widget::Text::new(&format!(\"current temperature: {:.2} C\", t99))\n                                .top_left_with_margins_on(ids.tab_inductance, 180.0, 560.0)\n                                .color(conrod::color::BLACK)\n                                .font_size(25)\n                                .line_spacing(3.0)\n                                .parent(ids.tab_inductance)\n                                .set(ids.inductance_current_temperature_f2_label, ui);\n\n                            widget::Text::new(&format!(\n                                \"calibration temperature: {:.2} C\",\n                                calibration_temperature2\n                            ))\n                            .top_left_with_margins_on(ids.tab_inductance, 210.0, 560.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(\n                                ids.inductance_frequency_calibration_temperature_f2_label,\n                                ui,\n                            );\n\n                            widget::Text::new(&format!(\n                                \"delta: {:.2} C\",\n                                t99 - calibration_temperature2\n                            ))\n                            .top_left_with_margins_on(ids.tab_inductance, 240.0, 560.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_frequency_delta_temperature_f2_label, ui);\n                        }\n\n                        widget::Text::new(\"Results: \")\n                            .top_left_with_margins_on(ids.tab_inductance, 320.0, 70.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_results_label, ui);\n\n                        widget::Text::new(&format!(\"L: {:.2} uH\", l))\n                            .top_left_with_margins_on(ids.tab_inductance, 370.0, 20.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(35)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_l_label, ui);\n\n                        widget::Text::new(&format!(\"C: {:.2} pF\", c))\n                            .top_left_with_margins_on(ids.tab_inductance, 370.0, 420.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(35)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_inductance)\n                            .set(ids.inductance_c_label, ui);\n\n                        if l_ab.clicked(\"CLEAR\", ui) {\n                            frequency1_l = (None, \"\".to_string());\n                            frequency2_l = (None, \"\".to_string());\n                        }\n\n                        if widget::Button::new()\n                            .top_left_with_margins_on(ids.tab_inductance, 420.0, 510.0)\n                            .h(30.0)\n                            .w(350.0)\n                            .label(\"Save to EEPROM\")\n                            .label_font_size(25)\n                            .color(conrod::color::LIGHT_BLUE)\n                            .set(ids.inductance_save_button, ui)\n                            .was_clicked()\n                        {\n                            flcq.eeprom_write_f64(&25u8, &c);\n                            flcq.eeprom_write_f64(&33u8, &l);\n                        }\n                    }\n                }\n            }*/\n            // ====================================================================================\n            // tab C\n            // ====================================================================================\n            cref_source.update_capacitance_tab_cref(&eeprom, ui);\n\n            /*           match (cref_input_active, cref_eeprom_active) {\n                            (true, false) => (),\n                            (false, true) => (),\n                            (true, true) => cref_input_active = false,\n                            (false, false) => cref_eeprom_active = true,\n                        }\n\n                        for v in &mut widget::Toggle::new(cref_input_active)\n                            .top_left_with_margins_on(ids.tab_capacitance, 30.0, 10.0)\n                            .parent(ids.tab_capacitance)\n                            .enabled(true)\n                            .color(conrod::color::GREEN)\n                            .border(4.0)\n                            .border_color(conrod::color::RED)\n                            .w(30.0)\n                            .set(ids.capacitance_cref1_toggle, ui)\n                        {\n                            let n = v.clone();\n                            if n {\n                                cref_input_active = true;\n                                cref_eeprom_active = false;\n                            } else {\n                                cref_input_active = false;\n                                cref_eeprom_active = true;\n                            }\n                        }\n\n                        for v in &mut widget::Toggle::new(cref_eeprom_active)\n                            .top_left_with_margins_on(ids.tab_capacitance, 30.0, 550.0)\n                            .parent(ids.tab_capacitance)\n                            .enabled(true)\n                            .color(conrod::color::GREEN)\n                            .border(4.0)\n                            .border_color(conrod::color::RED)\n                            .w(30.0)\n                            .set(ids.capacitance_cref2_toggle, ui)\n                        {\n                            let n = v.clone();\n                            if n {\n                                cref_input_active = false;\n                                cref_eeprom_active = true;\n                            } else {\n                                cref_input_active = true;\n                                cref_eeprom_active = false;\n                            }\n                        }\n\n                        widget::Text::new(\"Input C [edit]: \")\n                            .top_left_with_margins_on(ids.tab_capacitance, 30.0, 70.0)\n                            .color(conrod::color::BLACK)\n                            .font_size(25)\n                            .line_spacing(3.0)\n                            .parent(ids.tab_capacitance)\n                            .set(ids.capacitance_input_label, ui);\n            */\n\n            match (lref_input_active, lref_eeprom_active) {\n                (true, false) => (),\n                (false, true) => (),\n                (true, true) => lref_input_active = false,\n                (false, false) => lref_eeprom_active = true,\n            }\n\n            for v in &mut widget::Toggle::new(lref_input_active)\n                .top_left_with_margins_on(ids.tab_capacitance, 130.0, 10.0)\n                .parent(ids.tab_capacitance)\n                .enabled(true)\n                .color(conrod::color::GREEN)\n                .border(4.0)\n                .border_color(conrod::color::RED)\n                .w(30.0)\n                .set(ids.capacitance_lref1_toggle, ui)\n            {\n                let n = v.clone();\n                if n {\n                    lref_input_active = true;\n                    lref_eeprom_active = false;\n                } else {\n                    lref_input_active = false;\n                    lref_eeprom_active = true;\n                }\n            }\n\n            for v in &mut widget::Toggle::new(lref_eeprom_active)\n                .top_left_with_margins_on(ids.tab_capacitance, 165.0, 10.0)\n                .parent(ids.tab_capacitance)\n                .enabled(true)\n                .color(conrod::color::GREEN)\n                .border(4.0)\n                .border_color(conrod::color::RED)\n                .w(30.0)\n                .set(ids.capacitance_lref2_toggle, ui)\n            {\n                let n = v.clone();\n                if n {\n                    lref_input_active = false;\n                    lref_eeprom_active = true;\n                } else {\n                    lref_input_active = true;\n                    lref_eeprom_active = false;\n                }\n            }\n\n            widget::Text::new(\"Input L [ mesured ]: \")\n                .top_left_with_margins_on(ids.tab_capacitance, 130.0, 60.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(ids.tab_capacitance)\n                .set(ids.capacitance_input_l_label, ui);\n\n            widget::Text::new(\"Saved L [EEPROM]: \")\n                .top_left_with_margins_on(ids.tab_capacitance, 165.0, 60.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(ids.tab_capacitance)\n                .set(ids.capacitance_eeprom_l_label, ui);\n\n            if let Some((c0, l0, n)) = eeprom.c0_show() {\n                widget::Text::new(&format!(\"C0: {:.2} pF, L0: {:.2} µH ({:?})\", c0, l0, n))\n                    .top_left_with_margins_on(ids.tab_capacitance, 165.0, 560.0)\n                    .color(conrod::color::BLACK)\n                    .font_size(25)\n                    .line_spacing(3.0)\n                    .parent(ids.tab_capacitance)\n                    .set(ids.capacitance_eeprom_lc_label, ui);\n            } else {\n                widget::Text::new(\"C0: None pF, L0: None µH\")\n                    .top_left_with_margins_on(ids.tab_capacitance, 165.0, 560.0)\n                    .color(conrod::color::BLACK)\n                    .font_size(25)\n                    .line_spacing(3.0)\n                    .parent(ids.tab_capacitance)\n                    .set(ids.capacitance_eeprom_lc_label, ui);\n            }\n\n            f1_f2.new_tab(\n                Box::new(ActionButton {\n                    parent_id: ids.tab_capacitance,\n                    button_id: ids.capacitance_measure_button,\n                    enabled: flcq.is_init(),\n                }),\n                ids.capacitance_f1_label,\n                ids.capacitance_current_temperature_f1_label,\n                ids.capacitance_calibration_temperature_f1_label,\n                ids.capacitance_delta_temperature_f1_label,\n                ids.capacitance_f2_label,\n                ids.capacitance_current_temperature_f2_label,\n                ids.capacitance_calibration_temperature_f2_label,\n                ids.capacitance_delta_temperature_f2_label,\n            );\n            match f1_f2.show(ui) {\n                EClick::FNONE => (),\n                EClick::F1 => f1_f2.f1_set(frequency_pack(&mut flcq)),\n                EClick::F2 => f1_f2.f2_set(frequency_pack(&mut flcq)),\n                EClick::END(f1, f2) => {\n                    if let (Some(c1), Some(c2)) = cref_source.crefs() {\n                        if let Some(c0) = eeprom.c0() {\n                            let c = calc_c(f1, f2, c1, c2, c0);\n\n                            widget::Text::new(&format!(\"C: {:.2} pF\", c))\n                                .bottom_left_with_margins_on(ids.tab_capacitance, 120.0, 20.0)\n                                .color(conrod::color::BLACK)\n                                .font_size(35)\n                                .line_spacing(3.0)\n                                .parent(ids.tab_capacitance)\n                                .set(ids.capacitance_c_label, ui);\n\n                            if widget::Button::new()\n                                .w_h(220.0, 70.0)\n                                .bottom_left_with_margins_on(ids.tab_capacitance, 100.0, 300.0)\n                                .label(\"SAVE as Cref1\")\n                                .label_font_size(28)\n                                .color(conrod::color::LIGHT_BLUE)\n                                .set(ids.capacitance_save_c1_button, ui)\n                                .was_clicked()\n                            {\n                                history.append(Box::new(commands::TSaveCref1 { value: c }));\n                            }\n\n                            if widget::Button::new()\n                                .w_h(220.0, 70.0)\n                                .bottom_left_with_margins_on(ids.tab_capacitance, 100.0, 550.0)\n                                .label(\"SAVE as Cref2\")\n                                .label_font_size(28)\n                                .color(conrod::color::LIGHT_BLUE)\n                                .set(ids.capacitance_save_c2_button, ui)\n                                .was_clicked()\n                            {\n                                history.append(Box::new(commands::TSaveCref2 { value: c }));\n                            }\n                        }\n                    }\n                    history.eeprom(&mut (*eeprom));\n                }\n            }\n\n            /*\n                        const WIDTH_PORTS: conrod::Scalar = 100.0f64;\n                        let (mut events, scrollbar) = widget::ListSelect::single(list.len())\n                            .flow_down()\n                            .item_size(60.0)\n                            .scrollbar_next_to()\n                            .top_left_with_margins_on(ids.settings, 0.0, 0.0)\n                            .w(WIDTH_PORTS)\n                            .set(ids.ports, ui);\n\n                        while let Some(event) = events.next(ui, |_i| {\n                            println!(\"_i: {:?}\", _i);\n                            Some(_i) == selected\n                        }) {\n                            use conrod::widget::list_select::Event;\n                            match event {\n                                // For the `Item` events we instantiate the `List`'s items.\n                                Event::Item(item) => {\n                                    let label = &list[item.i].port_name;\n\n                                    let button = widget::Button::new()\n                                        .color(conrod::color::LIGHT_BLUE)\n                                        .label(label)\n                                        .label_font_size(30)\n                                        .label_color(conrod::color::YELLOW);\n                                    item.set(button, ui);\n                                }\n\n                                // The selection has changed.\n                                Event::Selection(selection) => {\n                                    //selection.update_index_set(&mut list_selected);\n                                    println!(\"selected indices: {:?}\", selection);\n                                }\n\n                                // The remaining events indicate interactions with the `ListSelect` widget.\n                                _event => {\n                                    ()\n                                    //println!(\"{:?}\", &event),\n                                }\n                            }\n                        }\n\n                        // Instantiate the scrollbar for the list.\n                        if let Some(s) = scrollbar {\n                            s.set(ui);\n                        }\n            */\n\n            if flcq.is_init() {\n                conrod::widget::Circle::fill(25.0)\n                    .bottom_right_with_margins_on(ids.uart, 5.0, 5.0)\n                    .color(conrod::color::GREEN)\n                    .set(ids.uart_led, ui);\n            } else {\n                conrod::widget::Circle::fill(25.0)\n                    .bottom_right_with_margins_on(ids.uart, 5.0, 5.0)\n                    .color(conrod::color::RED) //conrod::color::RED\n                    .set(ids.uart_led, ui);\n            }\n\n            /*\n                        fn text(text: widget::Text) -> widget::Text {\n                            text.color(color::BLACK).font_size(36)\n                        }\n            */\n            /*\n            let frequency = f.to_string() + \"Hz\";\n            widget::Text::new(&frequency)\n                //.padded_w_of(ids.left_col, PAD)\n                .mid_top_with_margin_on(ids.left_col, PAD)\n                .color(conrod::color::BLACK)\n                .font_size(22)\n                .left_justify()\n                .line_spacing(10.0)\n                .set(ids.left_text, ui);\n\n            widget::Text::new(&s)\n                .mid_top_with_margin_on(ids.middle_col, PAD)\n                .color(conrod::color::BLACK)\n                .font_size(22)\n                .set(ids.middle_text, ui);\n\n            let temperature = flcq.t().to_string() + \"C\";\n            conrod::widget::Text::new(&temperature)\n                .mid_top_with_margin_on(ids.right_col, PAD)\n                .color(conrod::color::BLACK)\n                .font_size(22)\n                .set(ids.right_text, ui);\n\n            for _click in conrod::widget::Button::new()\n                .middle_of(ids.left_col)\n                .set(ids.refresh, ui)\n            {\n                ();\n            }*/\n        }\n\n        display\n            .gl_window()\n            .window()\n            .set_cursor(conrod::backend::winit::convert_mouse_cursor(\n                ui.mouse_cursor(),\n            ));\n\n        // Render the `Ui` and then display it on the screen.\n        if let Some(primitives) = ui.draw_if_changed() {\n            renderer.fill(&display, primitives, &image_map);\n            let mut target = display.draw();\n            target.clear_color(1.0, 1.0, 1.0, 1.0);\n            renderer.draw(&display, &mut target, &image_map).unwrap();\n            target.finish().unwrap();\n        }\n    }\n}\n\nfn frequency_pack(com_port: &mut com::Flcq) -> FpackT {\n    let c = com_port.eeprom_read_byte(&0u8);\n    let r: FpackT; // read N count\n    match com_port.get_frequency_c(&c) {\n        (Some(f), _) => {\n            r = (\n                Some((\n                    f,\n                    com_port.eeprom_read_f64(&9u8),\n                    (com_port.t(), com_port.eeprom_read_f64(&17u8)),\n                )),\n                \"\".to_string(),\n            )\n        }\n\n        (None, str) => r = (None, str),\n    };\n    r\n}\n\nfn temperature(\n    ui: &mut conrod::UiCell,\n    ids: &Ids,\n    tab: conrod::widget::id::Id,\n    id: conrod::widget::id::Id,\n    t: (f64, f64, f64),\n) {\n    let (t, tc, d) = t;\n    widget::Text::new(&format!(\n        \"current temperature:       {:.2} C,\\nfrequency calibration temperature: {:.2} C,\\ndifference: {:.2} C\",\n        t,\n        tc,\n        d\n    )).bottom_left_with_margins_on(tab, 130.0, 20.0)\n        .color(conrod::color::BLACK)\n        .font_size(35)\n        .line_spacing(4.0)\n        .set(id, ui);\n    /*,\n        (None, str) => widget::Text::new(&str)\n            .color(conrod::color::BLACK)\n            .top_left_with_margins_on(ids.error, 5.0, 5.0)\n            .right_justify()\n            .font_size(16)\n            .line_spacing(3.0)\n            .set(ids.error_label, ui),\n    }*/\n}\n\nfn swap_f(f1: f64, f2: f64) -> bool {\n    let r;\n    if f1 < f2 {\n        r = false;\n    } else {\n        r = true;\n    }\n    r\n}\n\nfn swap_c(c1: f64, c2: f64) -> bool {\n    swap_f(c2, c1)\n}\n\nfn calc_l(f1: f64, f2: f64, c1: f64, c2: f64) -> (f64, f64) {\n    let f1_2 = f1 * f1;\n    let f2_2 = f2 * f2;\n\n    let c1f = c1 / 1000_000_000.0; // in farad\n    let c2f = c2 / 1000_000_000.0;\n\n    let c = (f1_2 * c1 - f2_2 * c2) / (f2_2 - f1_2);\n\n    let l = (1.0 / f1_2 - 1.0 / f2_2)\n        / (4.0 * std::f64::consts::PI * std::f64::consts::PI * (c1f - c2f)); // in Henry\n    (c, l * 1000_000_000.0) // return in pico farads and micro Henrys\n}\n\nfn calc_c(f1: f64, f2: f64, c1: f64, c2: f64, c0: f64) -> f64 {\n    let f1_2 = f1 * f1;\n    let f2_2 = f2 * f2;\n\n    (f1_2 * c1 - f2_2 * c2) / (f2_2 - f1_2) - c0\n}\n\nfn freq_show(ui: &mut conrod::UiCell, ids: &Ids, text: String) -> Option<f64> {\n    let mut res = None;\n\n    for edit in &widget::TextEdit::new(&text)\n        .bottom_left_with_margins_on(ids.count_frequency_slider, 80.0 + 100.0, 380.0)\n        .color(color::BLACK)\n        .font_size(45)\n        .line_spacing(2.0)\n        .w(500.0)\n        .wrap_by_character()\n        .center_justify()\n        .restrict_to_height(false) // Let the height grow infinitely and scroll.\n        .parent(ids.tab_frequency_calibration)\n        .set(ids.ref_frequency, ui)\n    {\n        let s = edit.clone();\n        let f = s.parse::<f64>().unwrap();\n        res = Some(f);\n    }\n    res\n}\n\nfn edit_ref_frequency(ui: &mut conrod::UiCell, ids: &Ids, freq: f64) -> f64 {\n    widget::Text::new(&\"Reference frequency: \".to_string())\n        .bottom_left_with_margins_on(ids.count_frequency_slider, 80.0 + 100.0, 20.0)\n        .color(conrod::color::BLACK)\n        .font_size(45)\n        .line_spacing(1.0)\n        .set(ids.ref_frequency_1, ui);\n\n    if freq < 1000.0 {\n        mhz_lebel(ui, ids, \"Hz\".to_string());\n        let r = freq_show(ui, ids, format!(\"{:.2}\", freq));\n        match r {\n            Some(hz) => hz,\n            None => freq,\n        }\n    } else if 1000.0 < freq && freq < 1000_000.0 {\n        mhz_lebel(ui, ids, \"kHz\".to_string());\n        let r = freq_show(ui, ids, format!(\"{:.5}\", freq / 1000.0));\n        match r {\n            Some(k_hz) => k_hz * 1000.0,\n            None => freq,\n        }\n    } else {\n        mhz_lebel(ui, ids, \"MHz\".to_string());\n        let r = freq_show(ui, ids, format!(\"{:.8}\", freq / 1000_000.0));\n        match r {\n            Some(m_hz) => m_hz * 1000_000.0,\n            None => freq,\n        }\n    }\n}\n\nfn mhz_lebel(ui: &mut conrod::UiCell, ids: &Ids, text: String) {\n    widget::Text::new(&text)\n        .bottom_left_with_margins_on(ids.count_frequency_slider, 80.0 + 100.0, 800.0)\n        .color(conrod::color::BLACK)\n        .font_size(45)\n        .line_spacing(1.0)\n        .set(ids.ref_frequency_2, ui);\n}\n\nfn error(ui: &mut conrod::UiCell, ids: &Ids, error: &std::string::String) {\n    widget::Text::new(error)\n        .color(conrod::color::BLACK)\n        .top_left_with_margins_on(ids.error, 5.0, 5.0)\n        .right_justify()\n        .font_size(16)\n        .line_spacing(3.0)\n        .set(ids.error_label, ui)\n}\n\nimpl TClicked for ActionButton {\n    fn clicked(&mut self, button_label: &str, ui: &mut conrod::UiCell) -> bool {\n        widget::Button::new()\n            .w_h(220.0, 70.0)\n            .bottom_left_with_margins_on(self.parent_id, 100.0, 780.0)\n            .label_font_size(45)\n            .enabled(self.enabled)\n            .label(button_label)\n            .parent(self.parent_id)\n            .set(self.button_id, ui)\n            .was_clicked()\n    }\n\n    fn parent_id(&mut self) -> widget::Id {\n        self.parent_id\n    }\n}\n\nimpl BToggle {\n    pub fn set_ids(\n        &mut self,\n        parent_id: widget::Id,\n        input_id: widget::Id,\n        eeprom_id: widget::Id,\n        input_label_id: widget::Id,\n        eeprom_label_id: widget::Id,\n    ) -> () {\n        self.parent_id = parent_id;\n        self.input_id = input_id;\n        self.eeprom_id = eeprom_id;\n        self.input_label_id = input_label_id;\n        self.eeprom_label_id = eeprom_label_id;\n        self.inited_ids = true;\n    }\n}\n\nimpl BToggle {\n    pub fn update(&mut self, ui: &mut conrod::UiCell) -> () {\n        if self.inited_ids {\n            match (self.cref_input_active, self.cref_eeprom_active) {\n                (true, false) => (),\n                (false, true) => (),\n                (true, true) => self.cref_input_active = false,\n                (false, false) => self.cref_eeprom_active = true,\n            }\n\n            for v in &mut widget::Toggle::new(self.cref_input_active)\n                .top_left_with_margins_on(self.parent_id, 30.0, 10.0)\n                .parent(self.parent_id)\n                .enabled(true)\n                .color(conrod::color::GREEN)\n                .border(4.0)\n                .border_color(conrod::color::RED)\n                .w_h(30.0, 30.0)\n                .set(self.input_id, ui)\n            {\n                //let n = v.clone();\n                let n = v.clone();\n                if n {\n                    self.cref_input_active = true;\n                    self.cref_eeprom_active = false;\n                } else {\n                    self.cref_input_active = false;\n                    self.cref_eeprom_active = true;\n                }\n            }\n\n            widget::Text::new(\"Input C [edit]: \")\n                .top_left_with_margins_on(self.parent_id, 30.0, 50.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(self.parent_id)\n                .set(self.input_label_id, ui);\n\n            for v in &mut widget::Toggle::new(self.cref_eeprom_active)\n                .top_left_with_margins_on(self.parent_id, 65.0, 10.0)\n                .parent(self.parent_id)\n                .enabled(true)\n                .color(conrod::color::GREEN)\n                .border(4.0)\n                .border_color(conrod::color::RED)\n                .w_h(30.0, 30.0)\n                .set(self.eeprom_id, ui)\n            {\n                let n = v.clone();\n                if n {\n                    self.cref_input_active = false;\n                    self.cref_eeprom_active = true;\n                } else {\n                    self.cref_input_active = true;\n                    self.cref_eeprom_active = false;\n                }\n            }\n\n            widget::Text::new(\"Saved C [EEPROM]: \")\n                .top_left_with_margins_on(self.parent_id, 65.0, 50.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(self.parent_id)\n                .set(self.eeprom_label_id, ui);\n        }\n    }\n\n    pub fn get(&mut self) -> (bool, bool) {\n        (self.cref_input_active, self.cref_eeprom_active)\n    }\n    pub fn eeprom_undefined(&mut self) -> () {\n        self.cref_eeprom_active = false;\n        self.cref_input_active = true;\n    }\n}\n\nimpl InputCRef {\n    fn update_capacitance_tab_cref(&mut self, eeprom: &Eeprom, ui: &mut conrod::UiCell) {\n        let (\n            parent_id,\n            input_toggle,\n            eeprom_toggle,\n            input_label,\n            eeprom_label,\n            cref1_label,\n            cref1_text,\n            cref1_pf,\n            cref2_label,\n            cref2_text,\n            cref2_pf,\n            e_cref1_label,\n            e_cref1_text,\n            e_cref1_pf,\n            e_cref2_label,\n            e_cref2_text,\n            e_cref2_pf,\n        ) = self.tab_id[&\"capacitance\".to_string()];\n\n        self.update(\n            ui,\n            eeprom,\n            parent_id,\n            input_toggle,\n            eeprom_toggle,\n            input_label,\n            eeprom_label,\n            cref1_label,\n            cref1_text,\n            cref1_pf,\n            cref2_label,\n            cref2_text,\n            cref2_pf,\n            e_cref1_label,\n            e_cref1_text,\n            e_cref1_pf,\n            e_cref2_label,\n            e_cref2_text,\n            e_cref2_pf,\n        );\n    }\n}\n\nimpl InputCRef {\n    fn update_inductance_tab_cref(&mut self, eeprom: &Eeprom, ui: &mut conrod::UiCell) {\n        let (\n            parent_id,\n            input_toggle,\n            eeprom_toggle,\n            input_label,\n            eeprom_label,\n            cref1_label,\n            cref1_text,\n            cref1_pf,\n            cref2_label,\n            cref2_text,\n            cref2_pf,\n            e_cref1_label,\n            e_cref1_text,\n            e_cref1_pf,\n            e_cref2_label,\n            e_cref2_text,\n            e_cref2_pf,\n        ) = self.tab_id[&\"inductance\".to_string()];\n\n        self.update(\n            ui,\n            eeprom,\n            parent_id,\n            input_toggle,\n            eeprom_toggle,\n            input_label,\n            eeprom_label,\n            cref1_label,\n            cref1_text,\n            cref1_pf,\n            cref2_label,\n            cref2_text,\n            cref2_pf,\n            e_cref1_label,\n            e_cref1_text,\n            e_cref1_pf,\n            e_cref2_label,\n            e_cref2_text,\n            e_cref2_pf,\n        );\n    }\n}\n\nimpl InputCRef {\n    fn init(&mut self, ids: &Ids) {\n        self.tab_id.insert(\n            \"capacitance\".to_string(),\n            (\n                ids.tab_capacitance,\n                ids.capacitance_input_toggle,\n                ids.capacitance_eeprom_toggle,\n                ids.capacitance_input_label,\n                ids.capacitance_eeprom_label,\n                ids.capacitance_cref1_label,\n                ids.capacitance_cref1_edit,\n                ids.capacitance_cref1_pf,\n                ids.capacitance_cref2_label,\n                ids.capacitance_cref2_edit,\n                ids.capacitance_cref2_pf,\n                ids.capacitance_e_cref1_label,\n                ids.capacitance_e_cref1_value,\n                ids.capacitance_e_cref1_pf,\n                ids.capacitance_e_cref2_label,\n                ids.capacitance_e_cref2_value,\n                ids.capacitance_e_cref2_pf,\n            ),\n        );\n\n        self.tab_id.insert(\n            \"inductance\".to_string(),\n            (\n                ids.tab_inductance,\n                ids.inductance_input_toggle,\n                ids.inductance_eeprom_toggle,\n                ids.inductance_input_label,\n                ids.inductance_eeprom_label,\n                ids.inductance_cref1_label,\n                ids.inductance_cref1_edit,\n                ids.inductance_cref1_pf,\n                ids.inductance_cref2_label,\n                ids.inductance_cref2_edit,\n                ids.inductance_cref2_pf,\n                ids.inductance_e_cref1_label,\n                ids.inductance_e_cref1_value,\n                ids.inductance_e_cref1_pf,\n                ids.inductance_e_cref2_label,\n                ids.inductance_e_cref2_value,\n                ids.inductance_e_cref2_pf,\n            ),\n        );\n    }\n}\n\nimpl InputCRef {\n    fn crefs(&mut self) -> (Option<f64>, Option<f64>) {\n        let (icref, ecref) = self.toggle.get();\n\n        if let (false, true, Some(_), Some(_)) = (icref, ecref, self.ecref1, self.ecref2) {\n            return (self.ecref1, self.ecref2);\n        }\n\n        (self.icref1, self.icref2)\n    }\n}\n\nimpl InputCRef {\n    fn if_swap_c(cref1: &mut Option<f64>, cref2: &mut Option<f64>) {\n        if let (Some(c1), Some(c2)) = (cref1.clone(), cref2.clone()) {\n            if swap_c(c1, c2) {\n                let a = cref2.clone();\n                let b = cref1.clone();\n                *cref1 = a;\n                *cref2 = b;\n            }\n        }\n    }\n}\n\nimpl InputCRef {\n    fn update(\n        &mut self,\n        ui: &mut conrod::UiCell,\n        eeprom: &Eeprom,\n        parent_id: widget::Id,\n        input_toggle: widget::Id,\n        eeprom_toggle: widget::Id,\n        input_label: widget::Id,\n        eeprom_label: widget::Id,\n        cref1_label: widget::Id,\n        cref1_text: widget::Id,\n        cref1_pf: widget::Id,\n        cref2_label: widget::Id,\n        cref2_text: widget::Id,\n        cref2_pf: widget::Id,\n        e_cref1_label: widget::Id,\n        e_cref1_value: widget::Id,\n        e_cref1_pf: widget::Id,\n        e_cref2_label: widget::Id,\n        e_cref2_value: widget::Id,\n        e_cref2_pf: widget::Id,\n    ) {\n        {\n            self.toggle.set_ids(\n                parent_id,\n                input_toggle,\n                eeprom_toggle,\n                input_label,\n                eeprom_label,\n            );\n            self.toggle.update(ui);\n\n            widget::Text::new(\"( Cref1: \")\n                .top_left_with_margins_on(parent_id, 30.0, 350.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(parent_id)\n                .set(cref1_label, ui);\n\n            match self.icref1.clone() {\n                Some(f) => {\n                    for edit in &widget::TextEdit::new(&format!(\"[ {:.2} ]\", f))\n                        .top_left_with_margins_on(parent_id, 30.0, 100.0 + 100.0 + 458.0 - 300.0)\n                        .color(color::BLACK)\n                        .font_size(25)\n                        .line_spacing(3.0)\n                        .w(250.0)\n                        .wrap_by_character()\n                        .right_justify()\n                        .restrict_to_height(false) // Let the height grow infinitely and scroll.\n                        .parent(parent_id)\n                        .set(cref1_text, ui)\n                    {\n                        let mut s = edit.clone().trim().to_string();\n                        {\n                            s.remove(0);\n                            let end = s.len() - 1;\n                            s.remove(end);\n                        }\n                        match s.trim().parse::<f64>() {\n                            Ok(f) => {\n                                if 9.0 < f && f < 10000.99 {\n                                    self.icref1 = Some(f);\n                                }\n                            } // if Ok(255), set x to 255\n                            Err(e) => println!(\"{}\", e), // if Err(\"some message\"), panic with error message \"some message\"\n                        }\n                    }\n                }\n                None => self.icref1 = Some(1000.0),\n            }\n\n            widget::Text::new(\"pF  > \")\n                .top_left_with_margins_on(parent_id, 30.0, 100.0 + 72.0 + 740.0 - 300.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(parent_id)\n                .set(cref1_pf, ui);\n\n            widget::Text::new(\" Cref2: \")\n                .top_left_with_margins_on(parent_id, 30.0, 100.0 + 100.0 + 450.0 + 40.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(parent_id)\n                .set(cref2_label, ui);\n\n            match self.icref2.clone() {\n                Some(f) => {\n                    for edit in &widget::TextEdit::new(&format!(\"[ {:.2} ]\", f))\n                        .top_left_with_margins_on(parent_id, 30.0, 100.0 + 100.0 + 458.0 + 40.0)\n                        .color(color::BLACK)\n                        //.background_color(color::LIGHT_YELLOW)\n                        .font_size(25)\n                        .line_spacing(3.0)\n                        .w(250.0)\n                        .wrap_by_character()\n                        .right_justify()\n                        .restrict_to_height(false) // Let the height grow infinitely and scroll.\n                        .parent(parent_id)\n                        .set(cref2_text, ui)\n                    {\n                        let mut s = edit.clone().to_string();\n                        {\n                            s.remove(0);\n                            let end = s.len() - 1;\n                            s.remove(end);\n                        }\n\n                        match s.trim().parse::<f64>() {\n                            Ok(f) => {\n                                if 9.0 < f && f < 10000.99 {\n                                    self.icref2 = Some(f);\n                                }\n                            } // if Ok(255), set x to 255\n                            Err(e) => println!(\"{}\", e), // if Err(\"some message\"), panic with error message \"some message\"\n                        }\n                    }\n                }\n                None => self.icref2 = Some(200.0),\n            }\n\n            widget::Text::new(\"pF )\")\n                .top_left_with_margins_on(parent_id, 30.0, 100.0 + 72.0 + 740.0 + 40.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(parent_id)\n                .set(cref2_pf, ui);\n\n            InputCRef::if_swap_c(&mut self.icref1, &mut self.icref2);\n\n            widget::Text::new(\"( Cref1: \")\n                .top_left_with_margins_on(parent_id, 65.0, 100.0 + 100.0 + 450.0 - 300.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(parent_id)\n                .set(e_cref1_label, ui);\n            {\n                let mut cref_str = \"None\".to_string();\n                if let Some((cref, n)) = eeprom.cref1_show() {\n                    self.ecref1 = Some(cref);\n                    cref_str = format!(\"{:.2} pF({:?})\", cref, n);\n                } else {\n                    self.toggle.eeprom_undefined();\n                }\n\n                widget::Text::new(&cref_str)\n                    .top_left_with_margins_on(parent_id, 65.0, 100.0 + 100.0 + 458.0 - 150.0)\n                    .color(conrod::color::BLACK)\n                    .font_size(25)\n                    .line_spacing(3.0)\n                    .parent(parent_id)\n                    .set(e_cref1_value, ui);\n            }\n\n            widget::Text::new(\" Cref2: \")\n                .top_left_with_margins_on(parent_id, 65.0, 100.0 + 100.0 + 450.0 + 40.0)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .parent(parent_id)\n                .set(e_cref2_label, ui);\n            {\n                let mut cref_str = \"None\".to_string();\n                if let Some((cref, n)) = eeprom.cref2_show() {\n                    self.ecref2 = Some(cref);\n                    cref_str = format!(\"{:.2} pF({:?})\", cref, n);\n                } else {\n                    self.toggle.eeprom_undefined();\n                }\n\n                widget::Text::new(&cref_str)\n                    .top_left_with_margins_on(parent_id, 65.0, 100.0 + 100.0 + 450.0 + 150.0)\n                    .color(conrod::color::BLACK)\n                    .font_size(25)\n                    .line_spacing(3.0)\n                    .parent(parent_id)\n                    .set(e_cref2_value, ui);\n            }\n\n            InputCRef::if_swap_c(&mut self.ecref1, &mut self.ecref2);\n        }\n    }\n}\n\nimpl<'a> TwoFreq<'a> {\n    fn new(input_ab: Box<dyn TClicked + 'a>, error: widget::Id, error_label: widget::Id) -> Self {\n        let d = [widget::Id::default(), widget::Id::default()];\n        TwoFreq {\n            ab: input_ab,\n            f1: FpackT::default(),\n            f2: FpackT::default(),\n            error: error,\n            error_label: error_label,\n            f_label: d,\n            calibration_temperature_f_label: d,\n            current_temperature_f_label: d,\n            delta_temperature_f_label: d,\n        }\n    }\n}\n\nimpl<'a> TwoFreq<'a> {\n    fn new_tab(\n        &mut self,\n        input_ab: Box<dyn TClicked + 'a>,\n        f1_label: widget::Id,\n        current_temperature_f1_label: widget::Id,\n        calibration_temperature_f1_label: widget::Id,\n        delta_temperature_f1_label: widget::Id,\n        f2_label: widget::Id,\n        current_temperature_f2_label: widget::Id,\n        calibration_temperature_f2_label: widget::Id,\n        delta_temperature_f2_label: widget::Id,\n    ) {\n        self.ab = input_ab;\n        self.f_label = [f1_label, f2_label];\n        self.calibration_temperature_f_label = [\n            calibration_temperature_f1_label,\n            calibration_temperature_f2_label,\n        ];\n        self.current_temperature_f_label =\n            [current_temperature_f1_label, current_temperature_f2_label];\n        self.delta_temperature_f_label = [delta_temperature_f1_label, delta_temperature_f2_label];\n    }\n}\n\nenum EClick {\n    FNONE,\n    F1,\n    F2,\n    END(f64, f64),\n}\n\nimpl<'a> TwoFreq<'a> {\n    fn show(&mut self, ui: &mut conrod::UiCell) -> EClick {\n        let mut r = EClick::FNONE;\n        if let ((Some(f1_pack), _str1), (Some(f2_pack), _str2)) = (self.f1.clone(), self.f2.clone())\n        {\n            let (f1_, p1_, _) = f1_pack;\n            let (f2_, p2_, _) = f2_pack;\n            if swap_f(f1_ / p1_, f2_ / p2_) {\n                let a = self.f2.clone();\n                let b = self.f1.clone();\n                self.f1 = a;\n                self.f2 = b;\n            }\n        }\n\n        match (self.f1.clone(), self.f2.clone()) {\n            ((None, str), _) => {\n                widget::Text::new(&str)\n                    .color(conrod::color::BLACK)\n                    .top_left_with_margins_on(self.error, 5.0, 5.0)\n                    .right_justify()\n                    .font_size(16)\n                    .line_spacing(3.0)\n                    .set(self.error_label, ui);\n\n                if self.ab.clicked(\"F1\", ui) {\n                    r = EClick::F1;\n                }\n            }\n            ((Some(f1), _), (None, str)) => {\n                if self.ab.clicked(\"F2\", ui) {\n                    r = EClick::F2;\n                }\n                self.f1_show(ui, f1);\n\n                widget::Text::new(&str)\n                    .color(conrod::color::BLACK)\n                    .top_left_with_margins_on(self.error, 5.0, 5.0)\n                    .right_justify()\n                    .font_size(16)\n                    .line_spacing(3.0)\n                    .set(self.error_label, ui);\n            }\n            ((Some(f1), _), (Some(f2), _)) => {\n                self.f1_show(ui, f1.clone());\n                self.f2_show(ui, f2.clone());\n\n                if self.ab.clicked(\"CLEAR\", ui) {\n                    self.f1 = (None, \"\".to_string());\n                    self.f2 = (None, \"\".to_string());\n                }\n                let (f1f, p1f, _) = f1.clone();\n                let (f2f, p2f, _) = f2.clone();\n                r = EClick::END(f1f / p1f, f2f / p2f);\n                //(self.f)()\n            }\n        }\n        r\n    }\n}\n\nimpl<'a> TwoFreq<'a> {\n    fn f1_show(\n        &mut self,\n        ui: &mut conrod::UiCell,\n        f1: (f64, f64, ((Option<f64>, std::string::String), f64)),\n    ) {\n        self.f_show(\n            ui,\n            f1,\n            (230.0, 20.0),\n            (260.0, 20.0),\n            (340.0 - 50.0, 20.0),\n            (370.0 - 50.0, 20.0),\n            0usize,\n        );\n    }\n\n    fn f2_show(\n        &mut self,\n        ui: &mut conrod::UiCell,\n        f2: (f64, f64, ((Option<f64>, std::string::String), f64)),\n    ) {\n        self.f_show(\n            ui,\n            f2,\n            (230.0, 590.0),\n            (260.0, 590.0),\n            (340.0 - 50.0, 590.0),\n            (370.0 - 50.0, 590.0),\n            1usize,\n        );\n    }\n}\n\nimpl<'a> TwoFreq<'a> {\n    fn f_show(\n        &mut self,\n        ui: &mut conrod::UiCell,\n        f1: (f64, f64, ((Option<f64>, std::string::String), f64)),\n        xy_f1: (f64, f64),\n        xy_current_t: (f64, f64),\n        xy_cal_t: (f64, f64),\n        xy_delta_t: (f64, f64),\n        i: usize,\n    ) {\n        let prnt = self.ab.parent_id();\n        let (f, p, t) = f1;\n\n        {\n            let (x, y) = xy_f1;\n            widget::Text::new(&format!(\"F1: {:.2} Hz\", f / p))\n                .top_left_with_margins_on(prnt, x, y)\n                .color(conrod::color::BLACK)\n                .font_size(25)\n                .line_spacing(3.0)\n                .right_justify()\n                .parent(prnt)\n                .set(self.f_label[i], ui);\n        }\n\n        let (current, t_calibration) = t;\n        if let (Some(t_now), _) = current {\n            {\n                let (x, y) = xy_current_t;\n                widget::Text::new(&format!(\"current temperature: {:.2} C\", t_now))\n                    .top_left_with_margins_on(prnt, x, y)\n                    .color(conrod::color::BLACK)\n                    .font_size(25)\n                    .line_spacing(3.0)\n                    .right_justify()\n                    .parent(prnt)\n                    .set(self.current_temperature_f_label[i], ui);\n            }\n            {\n                let (x, y) = xy_cal_t;\n                widget::Text::new(&format!(\"calibration temperature: {:.2} C\", t_calibration))\n                    .top_left_with_margins_on(prnt, x, y)\n                    .color(conrod::color::BLACK)\n                    .font_size(25)\n                    .line_spacing(3.0)\n                    .right_justify()\n                    .parent(prnt)\n                    .set(self.calibration_temperature_f_label[i], ui);\n            }\n            {\n                let (x, y) = xy_delta_t;\n                widget::Text::new(&format!(\"delta: {:.2} C\", t_now - t_calibration))\n                    .top_left_with_margins_on(prnt, x, y)\n                    .color(conrod::color::BLACK)\n                    .font_size(25)\n                    .line_spacing(3.0)\n                    .right_justify()\n                    .parent(prnt)\n                    .set(self.delta_temperature_f_label[i], ui);\n            }\n        }\n    }\n}\n\nimpl<'a> TwoFreq<'a> {\n    fn f1_set(&mut self, f1: FpackT) {\n        self.f1 = f1;\n    }\n}\n\nimpl<'a> TwoFreq<'a> {\n    fn f2_set(&mut self, f2: FpackT) {\n        self.f2 = f2;\n    }\n}\n\nimpl Default for ActionButton {\n    fn default() -> Self {\n        Self {\n            parent_id: widget::Id::default(),\n            button_id: widget::Id::default(),\n            enabled: false,\n        }\n    }\n}\n\nimpl Default for InputCRef {\n    fn default() -> Self {\n        Self {\n            toggle: BToggle::default(),\n            icref1: None,\n            icref2: None,\n            ecref1: None,\n            ecref2: None,\n            tab_id: std::collections::HashMap::default(),\n        }\n    }\n}\n\nimpl Default for BToggle {\n    fn default() -> Self {\n        Self {\n            parent_id: widget::Id::default(),\n            input_id: widget::Id::default(),\n            eeprom_id: widget::Id::default(),\n            input_label_id: widget::Id::default(),\n            eeprom_label_id: widget::Id::default(),\n            cref_input_active: true,\n            cref_eeprom_active: false,\n            inited_ids: false,\n        }\n    }\n}\n",
			"file": "src/main.rs",
			"file_size": 79033,
			"file_write_time": 132554509907654135,
			"settings":
			{
				"buffer_size": 76946,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/commands.rs",
			"settings":
			{
				"buffer_size": 1717,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "fff"
			}
		},
		{
			"file": "src/com.rs",
			"settings":
			{
				"buffer_size": 13896,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/sm.rs",
			"settings":
			{
				"buffer_size": 7326,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/sm/csm.rs",
			"settings":
			{
				"buffer_size": 1730,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/eeprom.rs",
			"settings":
			{
				"buffer_size": 6126,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Rust Enhanced/RustEnhanced.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"MAKEFILES",
					""
				],
				[
					"MAKEFILES",
					"make"
				],
				[
					"MAKEFILES",
					"clean"
				],
				[
					"Packages/C++/C Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"MAKEFILES",
				"make"
			]
		],
		[
			[
				[
					"MAKEFILES",
					""
				],
				[
					"MAKEFILES",
					"make"
				],
				[
					"MAKEFILES",
					"clean"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"MAKEFILES",
				"clean"
			]
		],
		[
			[
				[
					"MAKEFILES",
					""
				],
				[
					"MAKEFILES",
					"make"
				],
				[
					"MAKEFILES",
					"clean"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/ShellScript/ShellScript.sublime-build",
					""
				]
			],
			[
				"MAKEFILES",
				"clean"
			]
		],
		[
			[
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Automatic"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Check"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Document"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clippy"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Script"
				]
			],
			[
				"Packages/Rust Enhanced/RustEnhanced.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"Cont",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"rust",
				"Set Syntax: Rust"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 234.0,
		"history":
		[
			"print(sys.path)",
			"import sys",
			"print(sys.path)",
			"import sys",
			"sys.version"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/vkuzmenko/FLCQ_APP",
		"/C/Users/vkuzmenko/FLCQ_APP/src",
		"/C/Users/vkuzmenko/FLCQ_APP/src/sm"
	],
	"file_history":
	[
		"/C/Users/vkuzmenko/FLCQ_APP/src/csm.rs",
		"/C/Users/vkuzmenko/FLCQ_APP/Cargo.lock",
		"/C/Users/Vasyl/FLCQ_APP/src/commands.rs",
		"/C/Users/Vasyl/FLCQ_APP/FLCQ.sublime-project",
		"/C/Users/Vasyl/FLCQ_APP/src/tmp1hu2yk",
		"/C/Users/Vasyl/FLCQ_APP/src/tmp0c7b0r",
		"/C/Users/Vasyl/FLCQ_APP/src/tmp0ae29w",
		"/C/Users/Vasyl/FLCQ_APP/src/tmp0ab7bv",
		"/C/Users/Vasyl/FLCQ_APP/target/debug/build/glutin-e5de01fa147ee18d/out/test_gl_bindings.rs",
		"/C/Users/Vasyl/FLCQ_APP/src/tmp1n1le9",
		"/C/Users/Vasyl/FLCQ_APP/target/debug/build/glium-95758ff18252008d/out/gl_bindings.rs",
		"/C/Users/Vasyl/Downloads/DHL-Paketmarke_5LYEC43Q8WXG_1_Mustafa_Kocakus.pdf",
		"/C/Users/Vasyl/FLCQ_APP/src/main.rs",
		"/C/Users/Vasyl/FLCQ_APP/src/tmpa9cwk6",
		"/C/Users/Vasyl/FLCQ_APP/.gitignore",
		"/C/Users/Vasyl/FLCQ_APP/Cargo.toml",
		"/C/Users/Vasyl/FLCQ/uart.asm",
		"/C/Users/Vasyl/FLCQ/error",
		"/-0",
		"/C/Users/Vasyl/FLCQ/interrupt.asm",
		"/C/Users/Vasyl/FLCQ/FLCQ.lst",
		"/C/Users/Vasyl/FLCQ/main.asm",
		"/C/Users/Vasyl/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/C/Users/Vasyl/AppData/Roaming/Sublime Text 3/Packages/User/Python.sublime-settings"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"const",
			"fc",
			"frequency_count_intervals",
			"plot",
			"pushed_",
			"history",
			"ui",
			"selected",
			"selected_uart_port",
			"ids",
			"list",
			"selected_uart_port",
			"cref1:",
			"show",
			"Input L",
			"L Input",
			"eeprom_undefined",
			"Btoggle",
			"cref1",
			"if_swap_c",
			"Cref2:",
			"eeprom",
			"print",
			"e_cref1",
			"Saved C",
			"eeprom",
			"Saved C",
			");\t",
			"eeprom_lc",
			"history",
			"Vec::ne",
			"save_cef1",
			"TCommand",
			"TSa",
			"eeprom.clon",
			"eeprom",
			"box",
			"save_as",
			"MutFn",
			"eeprom_write_f64",
			"mut flc",
			"\n            ",
			"&41u8",
			"eeprom_write_f64",
			"eeprom_write",
			"BToggle",
			"Save",
			"capacitance_current_temperature_f1_label",
			"widget::Button::new()",
			"END(",
			"widget::Button::new()",
			"justify",
			"ActionButton",
			"f1",
			"ActionButton<F>",
			"TClicked",
			"ActionButton",
			");\n",
			"show(",
			"show",
			"f1_f2",
			"ActionButton",
			"inductance_delta_temperature_f1_label",
			"inductance_f1_label",
			"new",
			"TwoFreq",
			"f1_show",
			"TClicked",
			"|| flcq.is_init()",
			"eeprom_lc",
			"ActionButton",
			"swap_c",
			"cref_source",
			"src_",
			"inductance_eeprom_label",
			"tab_capacitance",
			"cref_sour",
			"550",
			"30.0, 10.0",
			"30.0, 0.0",
			"30.0, 550.0",
			"175",
			"ui.",
			"175",
			"calc_c",
			"frequency1_l",
			"frequency1_c",
			"frequency1_l",
			");\n",
			"=> ",
			"pack",
			"lref_eeprom_active",
			"Input C [edit]",
			"cref_input_active",
			"inductance_cref1_pf",
			"tab_capacitance",
			"label_capacity",
			"capacitance_cref1_label",
			"tab_c",
			"tab_capacitance",
			"flcq.ee",
			"inductance_c_label",
			"println",
			"printf",
			"inductance_l_label",
			"flcq",
			"flcq.eeprom_read_f64(&9u8)",
			"count",
			"frequency_cal",
			"temperature_cal",
			"frequency",
			"temperature(",
			"temperature",
			"get_fre\t",
			"this",
			"this sh",
			"this",
			"frequency",
			"temperatur",
			"Slider",
			"freq_show",
			"ref_frequency",
			"edit_ref_frequency",
			"),\n",
			"}\n",
			"edit_ref_frequency",
			"math",
			"0"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Cargo.toml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 542,
						"regions":
						{
						},
						"selection":
						[
							[
								368,
								368
							]
						],
						"settings":
						{
							"syntax": "Packages/TOML/TOML.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/main.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 76946,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								311
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/commands.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1717,
						"regions":
						{
						},
						"selection":
						[
							[
								231,
								233
							]
						],
						"settings":
						{
							"auto_name": "fff",
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/com.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13896,
						"regions":
						{
						},
						"selection":
						[
							[
								13813,
								13813
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6111.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/sm.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7326,
						"regions":
						{
						},
						"selection":
						[
							[
								111,
								111
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/sm/csm.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1730,
						"regions":
						{
						},
						"selection":
						[
							[
								604,
								604
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 513.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/eeprom.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6126,
						"regions":
						{
						},
						"selection":
						[
							[
								277,
								243
							]
						],
						"settings":
						{
							"auto_name": "",
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 355.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Rust Enhanced/RustEnhanced.sublime-build",
	"project": "FLCQ.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 280.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
